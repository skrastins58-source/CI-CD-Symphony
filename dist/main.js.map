{"version":3,"file":"main.js","mappings":"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","sources":["webpack://ci-cd-symphony/./src/metrics.js","webpack://ci-cd-symphony/./src/app.js","webpack://ci-cd-symphony/./src/utils.js","webpack://ci-cd-symphony/webpack/bootstrap","webpack://ci-cd-symphony/webpack/startup"],"sourcesContent":["/**\n * Metrics collection and management\n */\nclass MetricsCollector {\n    constructor() {\n        this.apiUrl = '/api/metrics';\n    }\n\n    /**\n     * Fetch latest metrics from API\n     * @returns {Promise<Object>} Metrics data\n     */\n    async fetchLatestMetrics() {\n        try {\n            // Mock data for demo - in real implementation this would fetch from API\n            return {\n                performance: 85,\n                coverage: 78,\n                bundleSize: 156789,\n                timestamp: new Date().toISOString()\n            };\n        } catch (error) {\n            console.error('Error fetching metrics:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Run new analysis\n     * @returns {Promise<Object>} Analysis results\n     */\n    async runAnalysis() {\n        // Simulate analysis time\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        \n        // Generate realistic mock results\n        const performance = Math.floor(Math.random() * 20) + 80; // 80-100\n        const coverage = Math.floor(Math.random() * 30) + 70; // 70-100\n        const bundleSize = Math.floor(Math.random() * 100000) + 100000; // 100KB - 200KB\n        \n        return {\n            performance,\n            coverage,\n            bundleSize,\n            timestamp: new Date().toISOString(),\n            analysis: {\n                performanceBreakdown: {\n                    fcp: Math.floor(Math.random() * 2000) + 1000,\n                    lcp: Math.floor(Math.random() * 3000) + 2000,\n                    cls: Math.random() * 0.1,\n                    tbt: Math.floor(Math.random() * 500) + 100\n                },\n                coverageDetails: {\n                    statements: coverage + Math.floor(Math.random() * 5),\n                    branches: coverage - Math.floor(Math.random() * 5),\n                    functions: coverage + Math.floor(Math.random() * 3),\n                    lines: coverage\n                },\n                bundleBreakdown: {\n                    vendor: Math.floor(bundleSize * 0.6),\n                    app: Math.floor(bundleSize * 0.3),\n                    assets: Math.floor(bundleSize * 0.1)\n                }\n            }\n        };\n    }\n\n    /**\n     * Get historical metrics data\n     * @returns {Promise<Array>} Historical data\n     */\n    async getHistory() {\n        // Mock historical data\n        const history = [];\n        const now = new Date();\n        \n        for (let i = 9; i >= 0; i--) {\n            const date = new Date(now);\n            date.setDate(date.getDate() - i);\n            \n            history.push({\n                date: date.toISOString().split('T')[0],\n                performance: Math.floor(Math.random() * 20) + 80,\n                coverage: Math.floor(Math.random() * 30) + 70,\n                bundleSize: Math.floor(Math.random() * 100000) + 100000\n            });\n        }\n        \n        return history;\n    }\n\n    /**\n     * Get current metrics data\n     * @returns {Promise<Object>} Current data\n     */\n    async getCurrentData() {\n        const current = await this.fetchLatestMetrics();\n        const history = await this.getHistory();\n        \n        return {\n            current,\n            history,\n            meta: {\n                generated: new Date().toISOString(),\n                version: '1.0.0'\n            }\n        };\n    }\n\n    /**\n     * Calculate performance score based on Lighthouse metrics\n     * @param {Object} metrics - Lighthouse metrics\n     * @returns {number} Performance score\n     */\n    calculatePerformanceScore(metrics) {\n        // Simplified Lighthouse scoring algorithm\n        const weights = {\n            fcp: 0.1,\n            lcp: 0.25,\n            cls: 0.15,\n            tbt: 0.3,\n            si: 0.1,\n            fid: 0.1\n        };\n\n        let score = 100;\n        \n        // Deduct points based on metrics\n        if (metrics.fcp > 1800) score -= (metrics.fcp - 1800) / 100 * weights.fcp * 100;\n        if (metrics.lcp > 2500) score -= (metrics.lcp - 2500) / 100 * weights.lcp * 100;\n        if (metrics.cls > 0.1) score -= (metrics.cls - 0.1) * 1000 * weights.cls * 100;\n        if (metrics.tbt > 200) score -= (metrics.tbt - 200) / 10 * weights.tbt * 100;\n\n        return Math.max(0, Math.round(score));\n    }\n\n    /**\n     * Analyze bundle size trends\n     * @param {Array} history - Historical bundle sizes\n     * @returns {Object} Trend analysis\n     */\n    analyzeBundleTrends(history) {\n        if (history.length < 2) return { trend: 'insufficient_data' };\n\n        const recent = history.slice(-5);\n        const older = history.slice(-10, -5);\n\n        const recentAvg = recent.reduce((sum, item) => sum + item.bundleSize, 0) / recent.length;\n        const olderAvg = older.reduce((sum, item) => sum + item.bundleSize, 0) / older.length;\n\n        const change = ((recentAvg - olderAvg) / olderAvg) * 100;\n\n        return {\n            trend: change > 5 ? 'increasing' : change < -5 ? 'decreasing' : 'stable',\n            change: Math.round(change),\n            recentAverage: Math.round(recentAvg),\n            previousAverage: Math.round(olderAvg)\n        };\n    }\n}\n\nmodule.exports = { MetricsCollector };","// For browser compatibility, load classes from global scope if available\nconst MetricsCollector = (typeof window !== 'undefined' && window.MetricsCollector) || \n                         require('./metrics').MetricsCollector;\nconst Utils = (typeof window !== 'undefined' && window.Utils) || \n              require('./utils').Utils;\n\n/**\n * Main application class for CI/CD Symphony\n */\nclass CICDSymphony {\n    constructor() {\n        this.metrics = new MetricsCollector();\n        this.utils = new Utils();\n        this.initializeApp();\n    }\n\n    /**\n     * Initialize the application\n     */\n    initializeApp() {\n        console.log('🎼 CI/CD Symphony inicializējas...');\n        this.loadMetrics();\n        this.setupEventListeners();\n        this.updateUI();\n    }\n\n    /**\n     * Load metrics from API or local storage\n     */\n    async loadMetrics() {\n        try {\n            const data = await this.metrics.fetchLatestMetrics();\n            this.updateMetricsDisplay(data);\n        } catch (error) {\n            console.error('Kļūda ielādējot metriku:', error);\n            this.showError('Nevarēja ielādēt metriku datus');\n        }\n    }\n\n    /**\n     * Update metrics display in UI\n     * @param {Object} data - Metrics data\n     */\n    updateMetricsDisplay(data) {\n        const performanceEl = document.getElementById('performance');\n        const coverageEl = document.getElementById('coverage');\n        const bundleSizeEl = document.getElementById('bundleSize');\n\n        if (performanceEl) performanceEl.textContent = data.performance + '%';\n        if (coverageEl) coverageEl.textContent = data.coverage + '%';\n        if (bundleSizeEl) bundleSizeEl.textContent = this.utils.formatBytes(data.bundleSize);\n\n        this.updateBadges(data);\n    }\n\n    /**\n     * Update status badges\n     * @param {Object} data - Metrics data\n     */\n    updateBadges(data) {\n        const perfBadge = document.getElementById('performanceBadge');\n        const covBadge = document.getElementById('coverageBadge');\n        const bundleBadge = document.getElementById('bundleBadge');\n\n        if (perfBadge) {\n            const perfColor = data.performance >= 90 ? 'green' : data.performance >= 70 ? 'yellow' : 'red';\n            perfBadge.src = `https://img.shields.io/badge/Performance-${data.performance}%25-${perfColor}`;\n        }\n\n        if (covBadge) {\n            const covColor = data.coverage >= 80 ? 'green' : data.coverage >= 60 ? 'yellow' : 'red';\n            covBadge.src = `https://img.shields.io/badge/Coverage-${data.coverage}%25-${covColor}`;\n        }\n\n        if (bundleBadge) {\n            const sizeKB = Math.round(data.bundleSize / 1024);\n            const bundleColor = sizeKB <= 100 ? 'green' : sizeKB <= 250 ? 'yellow' : 'red';\n            bundleBadge.src = `https://img.shields.io/badge/Bundle-${sizeKB}KB-${bundleColor}`;\n        }\n    }\n\n    /**\n     * Setup event listeners\n     */\n    setupEventListeners() {\n        // Global functions for HTML onclick handlers\n        window.runAnalysis = () => this.runAnalysis();\n        window.showHistory = () => this.showHistory();\n        window.exportData = () => this.exportData();\n    }\n\n    /**\n     * Run new analysis\n     */\n    async runAnalysis() {\n        console.log('🔄 Palaidz jaunu analīzi...');\n        const resultsEl = document.getElementById('results');\n        if (resultsEl) {\n            resultsEl.innerHTML = '<p>⏳ Notiek analīze...</p>';\n        }\n\n        try {\n            const results = await this.metrics.runAnalysis();\n            this.displayResults(results);\n        } catch (error) {\n            console.error('Analīzes kļūda:', error);\n            this.showError('Analīzes kļūda');\n        }\n    }\n\n    /**\n     * Show historical data\n     */\n    async showHistory() {\n        console.log('📊 Rāda vēstures datus...');\n        const resultsEl = document.getElementById('results');\n        if (resultsEl) {\n            const history = await this.metrics.getHistory();\n            resultsEl.innerHTML = this.formatHistoryTable(history);\n        }\n    }\n\n    /**\n     * Export data\n     */\n    async exportData() {\n        console.log('📥 Eksportē datus...');\n        const data = await this.metrics.getCurrentData();\n        this.utils.downloadJSON(data, 'ci-cd-metrics.json');\n    }\n\n    /**\n     * Display analysis results\n     * @param {Object} results - Analysis results\n     */\n    displayResults(results) {\n        const resultsEl = document.getElementById('results');\n        if (resultsEl) {\n            resultsEl.innerHTML = `\n                <h3>✅ Analīze pabeigta</h3>\n                <pre id=\"analysis-json\"></pre>\n            `;\n            // Safe insertion of JSON string\n            const pre = document.getElementById('analysis-json');\n            if (pre) pre.textContent = JSON.stringify(results, null, 2);\n        }\n        this.updateMetricsDisplay(results);\n    }\n\n    /**\n     * Format history table\n     * @param {Array} history - Historical data\n     * @returns {string} HTML table\n     */\n    formatHistoryTable(history) {\n        if (!history || history.length === 0) {\n            return '<p>Nav vēstures datu</p>';\n        }\n\n        let table = `\n            <h3>📊 Metriku Vēsture</h3>\n            <table style=\"width: 100%; border-collapse: collapse; margin-top: 20px;\">\n                <thead>\n                    <tr style=\"background: rgba(255,255,255,0.2);\">\n                        <th style=\"padding: 10px; border: 1px solid rgba(255,255,255,0.3);\">Datums</th>\n                        <th style=\"padding: 10px; border: 1px solid rgba(255,255,255,0.3);\">Performance</th>\n                        <th style=\"padding: 10px; border: 1px solid rgba(255,255,255,0.3);\">Coverage</th>\n                        <th style=\"padding: 10px; border: 1px solid rgba(255,255,255,0.3);\">Bundle Size</th>\n                    </tr>\n                </thead>\n                <tbody>\n        `;\n\n        history.forEach(entry => {\n            table += `\n                <tr>\n                    <td style=\"padding: 10px; border: 1px solid rgba(255,255,255,0.3);\">${entry.date}</td>\n                    <td style=\"padding: 10px; border: 1px solid rgba(255,255,255,0.3);\">${entry.performance}%</td>\n                    <td style=\"padding: 10px; border: 1px solid rgba(255,255,255,0.3);\">${entry.coverage}%</td>\n                    <td style=\"padding: 10px; border: 1px solid rgba(255,255,255,0.3);\">${this.utils.formatBytes(entry.bundleSize)}</td>\n                </tr>\n            `;\n        });\n\n        table += '</tbody></table>';\n        return table;\n    }\n\n    /**\n     * Show error message\n     * @param {string} message - Error message\n     */\n    showError(message) {\n        const resultsEl = document.getElementById('results');\n        if (resultsEl) {\n            resultsEl.innerHTML = `<p style=\"color: #ff6b6b;\">❌ ${message}</p>`;\n        }\n    }\n\n    /**\n     * Update UI with current state\n     */\n    updateUI() {\n        console.log('🎨 UI atjaunots');\n    }\n}\n\n// Initialize the application when DOM is loaded\nif (typeof document !== 'undefined') {\n    document.addEventListener('DOMContentLoaded', () => {\n        new CICDSymphony();\n    });\n}\n\n// Export for Node.js if needed\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = CICDSymphony;\n} else {\n    // Make available globally in browser\n    window.CICDSymphony = CICDSymphony;\n}\n","/**\n * Utility functions for CI/CD Symphony\n */\nclass Utils {\n    /**\n     * Format bytes to human readable format\n     * @param {number} bytes - Bytes to format\n     * @param {number} decimals - Number of decimal places\n     * @returns {string} Formatted size\n     */\n    formatBytes(bytes, decimals = 2) {\n        if (bytes === 0) return '0 Bytes';\n\n        const k = 1024;\n        const dm = decimals < 0 ? 0 : decimals;\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n    }\n\n    /**\n     * Download data as JSON file\n     * @param {Object} data - Data to download\n     * @param {string} filename - Filename\n     */\n    downloadJSON(data, filename) {\n        const dataStr = JSON.stringify(data, null, 2);\n        const dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr);\n        \n        const exportFileDefaultName = filename || 'data.json';\n        \n        const linkElement = document.createElement('a');\n        linkElement.setAttribute('href', dataUri);\n        linkElement.setAttribute('download', exportFileDefaultName);\n        linkElement.click();\n    }\n\n    /**\n     * Calculate percentage change\n     * @param {number} oldValue - Old value\n     * @param {number} newValue - New value\n     * @returns {number} Percentage change\n     */\n    calculatePercentageChange(oldValue, newValue) {\n        if (oldValue === 0) return newValue > 0 ? 100 : 0;\n        return ((newValue - oldValue) / oldValue) * 100;\n    }\n\n    /**\n     * Generate color based on score\n     * @param {number} score - Score (0-100)\n     * @param {boolean} inverse - Whether lower is better\n     * @returns {string} Color code\n     */\n    getScoreColor(score, inverse = false) {\n        if (inverse) {\n            if (score <= 50) return '#4caf50'; // green\n            if (score <= 80) return '#ff9800'; // orange\n            return '#f44336'; // red\n        } else {\n            if (score >= 90) return '#4caf50'; // green\n            if (score >= 70) return '#ff9800'; // orange\n            return '#f44336'; // red\n        }\n    }\n\n    /**\n     * Debounce function\n     * @param {Function} func - Function to debounce\n     * @param {number} wait - Wait time in ms\n     * @param {boolean} immediate - Execute immediately\n     * @returns {Function} Debounced function\n     */\n    debounce(func, wait, immediate) {\n        let timeout;\n        return function executedFunction(...args) {\n            const later = () => {\n                timeout = null;\n                if (!immediate) func(...args);\n            };\n            const callNow = immediate && !timeout;\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n            if (callNow) func(...args);\n        };\n    }\n\n    /**\n     * Format timestamp to readable date\n     * @param {string} timestamp - ISO timestamp\n     * @returns {string} Formatted date\n     */\n    formatDate(timestamp) {\n        const date = new Date(timestamp);\n        return date.toLocaleDateString('lv-LV', {\n            year: 'numeric',\n            month: 'short',\n            day: 'numeric',\n            hour: '2-digit',\n            minute: '2-digit'\n        });\n    }\n\n    /**\n     * Generate unique ID\n     * @returns {string} Unique ID\n     */\n    generateId() {\n        return Date.now().toString(36) + Math.random().toString(36).slice(2);\n    }\n\n    /**\n     * Validate email format\n     * @param {string} email - Email to validate\n     * @returns {boolean} Is valid email\n     */\n    isValidEmail(email) {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return emailRegex.test(email);\n    }\n\n    /**\n     * Deep clone object\n     * @param {Object} obj - Object to clone\n     * @returns {Object} Cloned object\n     */\n    deepClone(obj) {\n        if (obj === null || typeof obj !== 'object') return obj;\n        if (obj instanceof Date) return new Date(obj.getTime());\n        if (obj instanceof Array) return obj.map(item => this.deepClone(item));\n        if (typeof obj === 'object') {\n            const clonedObj = {};\n            for (let key in obj) {\n                if (obj.hasOwnProperty(key)) {\n                    clonedObj[key] = this.deepClone(obj[key]);\n                }\n            }\n            return clonedObj;\n        }\n    }\n\n    /**\n     * Check if running in CI environment\n     * @returns {boolean} Is CI environment\n     */\n    isCI() {\n        return !!(\n            process.env.CI ||\n            process.env.CONTINUOUS_INTEGRATION ||\n            process.env.BUILD_NUMBER ||\n            process.env.GITHUB_ACTIONS ||\n            process.env.GITLAB_CI ||\n            process.env.CIRCLECI ||\n            process.env.TRAVIS\n        );\n    }\n\n    /**\n     * Get environment variables safely\n     * @param {string} key - Environment variable key\n     * @param {string} defaultValue - Default value\n     * @returns {string} Environment variable value\n     */\n    getEnv(key, defaultValue = '') {\n        return process.env[key] || defaultValue;\n    }\n}\n\nmodule.exports = { Utils };","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(186);\n"],"names":["module","exports","MetricsCollector","constructor","this","apiUrl","fetchLatestMetrics","performance","coverage","bundleSize","timestamp","Date","toISOString","error","console","runAnalysis","Promise","resolve","setTimeout","Math","floor","random","analysis","performanceBreakdown","fcp","lcp","cls","tbt","coverageDetails","statements","branches","functions","lines","bundleBreakdown","vendor","app","assets","getHistory","history","now","i","date","setDate","getDate","push","split","getCurrentData","current","meta","generated","version","calculatePerformanceScore","metrics","score","max","round","analyzeBundleTrends","length","trend","recent","slice","older","recentAvg","reduce","sum","item","olderAvg","change","recentAverage","previousAverage","window","require","Utils","CICDSymphony","utils","initializeApp","log","loadMetrics","setupEventListeners","updateUI","data","updateMetricsDisplay","showError","performanceEl","document","getElementById","coverageEl","bundleSizeEl","textContent","formatBytes","updateBadges","perfBadge","covBadge","bundleBadge","perfColor","src","covColor","sizeKB","bundleColor","showHistory","exportData","resultsEl","innerHTML","results","displayResults","formatHistoryTable","downloadJSON","pre","JSON","stringify","table","forEach","entry","message","addEventListener","bytes","decimals","dm","parseFloat","pow","toFixed","filename","dataStr","dataUri","encodeURIComponent","exportFileDefaultName","linkElement","createElement","setAttribute","click","calculatePercentageChange","oldValue","newValue","getScoreColor","inverse","debounce","func","wait","immediate","timeout","args","callNow","clearTimeout","later","formatDate","toLocaleDateString","year","month","day","hour","minute","generateId","toString","isValidEmail","email","test","deepClone","obj","getTime","Array","map","clonedObj","key","hasOwnProperty","isCI","process","env","CI","CONTINUOUS_INTEGRATION","BUILD_NUMBER","GITHUB_ACTIONS","GITLAB_CI","CIRCLECI","TRAVIS","getEnv","defaultValue","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}