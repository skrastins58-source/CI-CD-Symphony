#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üí¨ Adding PR comment with metrics...');

async function commentOnPR() {
  try {
    const resultsPath = path.join(__dirname, '../reports/analysis-results.json');
    
    if (!fs.existsSync(resultsPath)) {
      console.log('‚ö†Ô∏è No analysis results found, skipping PR comment');
      return;
    }
    
    const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
    const prNumber = process.env.PR_NUMBER;
    
    if (!prNumber) {
      console.log('‚ö†Ô∏è No PR number found, skipping PR comment');
      return;
    }
    
    // Generate comment content
    const comment = generateCommentContent(results);
    
    // Use GitHub API to post comment (simplified version)
    console.log('PR Comment Content:');
    console.log('='.repeat(50));
    console.log(comment);
    console.log('='.repeat(50));
    
    console.log('‚úÖ PR comment content generated');
  } catch (error) {
    console.error('‚ùå PR comment failed:', error.message);
  }
}

function generateCommentContent(results) {
  const { bundleSize, performance, coverage } = results;
  
  return `## üìä CI/CD Symphony Analysis Results

### üì¶ Bundle Analysis
- **Size**: ${bundleSize?.sizeFormatted || 'N/A'}

### ‚ö° Performance Metrics
- **Performance Score**: ${performance?.scores?.performance || 'N/A'}
- **Accessibility**: ${performance?.scores?.accessibility || 'N/A'}
- **Best Practices**: ${performance?.scores?.bestPractices || 'N/A'}
- **SEO**: ${performance?.scores?.seo || 'N/A'}

### üß™ Test Coverage
- **Lines**: ${coverage?.total?.lines?.pct || 'N/A'}%
- **Statements**: ${coverage?.total?.statements?.pct || 'N/A'}%
- **Functions**: ${coverage?.total?.functions?.pct || 'N/A'}%
- **Branches**: ${coverage?.total?.branches?.pct || 'N/A'}%

---
*ü§ñ This comment was automatically generated by CI/CD Symphony*`;
}

if (require.main === module) {
  commentOnPR();
}

module.exports = { commentOnPR };